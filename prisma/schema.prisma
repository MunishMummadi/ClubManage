generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Club {
  id           Int           @id @default(autoincrement())
  name         String        @unique()
  quotation    String?
  about        String?
  clubType     String?
  fileUrl      String?
  gmail        String?
  facebookUrl  String?
  instagramUrl String?
  twitterUrl   String?
  youtubeUrl   String?
  createdAt    DateTime      @default(now())
  messages     Message[]
  userClub     UserClub[]
  event        Event[]
  designation  Designation[]
  Album        Album[]
}

model Designation {
  id              Int      @id @default(autoincrement())
  name            String   @unique()
  fileUrl         String
  designationType String @unique()
  club            Club     @relation(fields: [clubId], references: [name])
  clubId          String
  createdAt       DateTime @default(now())
}

model User {
  id        Int        @id @default(autoincrement())
  mailId    String     @unique()
  password  String
  messages  Message[]
  userClub  UserClub[]
  event     Event[]
  createdAt DateTime   @default(now()) @map("created_at")
}

model Message {
  id          Int      @id @default(autoincrement())
  club        Club     @relation(fields: [clubId], references: [name])
  clubId      String
  user        User     @relation(fields: [userId], references: [mailId])
  userId      String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
}

model UserClub {
  club      Club     @relation(fields: [clubId], references: [name])
  clubId    String
  user      User     @relation(fields: [userId], references: [mailId])
  userId    String
  role      Int
  createdAt DateTime @default(now()) @map("created_at")

  @@id([clubId, userId])
}

model Event {
  
  club      Club     @relation(fields: [clubId], references: [name])
  clubId    String
  user      User     @relation(fields: [userId], references: [mailId])
  userId    String
  header    String  @unique()
  paragraph String
  fileUrl   String
  eventDate DateTime
  album     Album[]
  createdAt DateTime @default(now()) @map("created_at")

  @@id([clubId, header])
}

model Album {
  id     Int    @id @default(autoincrement())
  club   Club   @relation(fields: [clubId], references: [name])
  clubId String

  event     Event  @relation(fields: [eventName], references: [header])
  eventName String

  fileUrl String

  createdAt DateTime @default(now()) @map("created_at")
}











// 0 means member
// 1 means manager
// 2 means admin